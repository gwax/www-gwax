.. id: 17674
.. author: George Leslie-Waksman
.. author_email: waksman@gmail.com
.. author_url: https://www.gwax.com
.. date_utc: 2018-12-23T07:46:57.271307
.. compiler: rest

Having the benefit of time, I'm not terribly fond of any of my prior solutions,
these days I'd probably start with a deque and eat things off the left side.
A bit like:

.. code:: python

    import collections

    def flatten_to_list(something):
        retlist = []
        queue = collections.deque([something])
        while queue:
            item = queue.popleft()
            while hasattr(item, '__iter__'):
                queue.extend(item[:0:-1])
                item = item[0]
            retlist.append(item)
        return retlist


Even so, the part that I'm most unhappy about is that this doesn't play well
with strings but that's mostly because strings support ``__iter__`` and always
behave funny in this kind of situation.

There are probably better approaches and one could always consider a generator
but so it goes.
